
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tidylda"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('tidylda')
tidylda is under active development. The API and behavior may change.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("calc_prob_coherence")
> ### * calc_prob_coherence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_prob_coherence
> ### Title: Probabilistic coherence of topics
> ### Aliases: calc_prob_coherence
> 
> ### ** Examples
> 
> # Load a pre-formatted dtm and topic model
> data(nih_sample_dtm)
> 
> # fit a model
> set.seed(12345)
> model <- tidylda(
+   data = nih_sample_dtm[1:20, ], k = 5,
+   iterations = 100, burnin = 50
+ )
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
> 
> calc_prob_coherence(beta = model$beta, data = nih_sample_dtm, m = 5)
         1          2          3          4          5 
0.26093103 0.04963815 0.34611111 0.15923123 0.23773684 
> 
> 
> 
> cleanEx()
> nameEx("glance.tidylda")
> ### * glance.tidylda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.tidylda
> ### Title: Glance method for 'tidylda' objects
> ### Aliases: glance.tidylda
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("posterior")
> ### * posterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: posterior
> ### Title: Draw from the marginal posteriors of a tidylda topic model
> ### Aliases: posterior posterior.tidylda generate.tidylda_posterior
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("predict.tidylda")
> ### * predict.tidylda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.tidylda
> ### Title: Get predictions from a Latent Dirichlet Allocation model
> ### Aliases: predict.tidylda
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("print.tidylda")
> ### * print.tidylda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.tidylda
> ### Title: Print Method for tidylda
> ### Aliases: print.tidylda
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("refit.tidylda")
> ### * refit.tidylda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: refit.tidylda
> ### Title: Update a Latent Dirichlet Allocation topic model
> ### Aliases: refit.tidylda
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.tidylda")
> ### * tidy.tidylda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.tidylda
> ### Title: Tidy a matrix from a 'tidylda' topic model
> ### Aliases: tidy.tidylda tidy.matrix
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("tidylda")
> ### * tidylda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidylda
> ### Title: Fit a Latent Dirichlet Allocation topic model
> ### Aliases: tidylda
> 
> ### ** Examples
> 
> # load some data
> data(nih_sample_dtm)
> 
> # fit a model
> set.seed(12345)
> m <- tidylda(
+   data = nih_sample_dtm[1:20, ], k = 5,
+   iterations = 200, burnin = 175
+ )
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
> 
> str(m)
List of 9
 $ beta          : num [1:5, 1:5210] 4.47e-05 5.23e-05 4.44e-05 4.19e-05 3.43e-05 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:5] "1" "2" "3" "4" ...
  .. ..$ : chr [1:5210] "folding" "tosuprttedprtmnt" "importation" "hd" ...
 $ theta         : num [1:20, 1:5] 0.00943 0.04204 0.00424 0.57446 0.00181 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:20] "8693991" "8693362" "8607498" "8697008" ...
  .. ..$ : chr [1:5] "1" "2" "3" "4" ...
 $ lambda        : num [1:5, 1:5210] 0.199 0.188 0.199 0.202 0.212 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:5] "1" "2" "3" "4" ...
  .. ..$ : chr [1:5210] "folding" "tosuprttedprtmnt" "importation" "hd" ...
 $ alpha         : num 0.1
 $ eta           : Named num 0.05
  ..- attr(*, "names")= chr "folding"
 $ summary       : tibble [5 × 4] (S3: tbl_df/tbl/data.frame)
  ..$ topic     : num [1:5] 1 2 3 4 5
  ..$ prevalence: num [1:5] 18.9 15.3 19 20.5 26.3
  ..$ coherence : num [1:5] 0.2033 0.0408 0.395 0.1186 -0.0429
  ..$ top_terms : chr [1:5] "crc, gut, health, hiv, fertility, ..." "research, based, cns, training, inbre, ..." "cell, cells, mast, fc, epsilon, ..." "clinical, cancer, studies, psoriasis, radiation, ..." ...
 $ call          : language tidylda(data = nih_sample_dtm[1:20, ], k = 5, iterations = 200, burnin = 175)
 $ log_likelihood: tibble [200 × 2] (S3: tbl_df/tbl/data.frame)
  ..$ iteration     : num [1:200] 0 1 2 3 4 5 6 7 8 9 ...
  ..$ log_likelihood: num [1:200] -36505 -36390 -36258 -36091 -35916 ...
 $ counts        :List of 2
  ..$ Cd: num [1:20, 1:5] 2.12 10.6 0.44 216.76 0.2 ...
  ..$ Cv: num [1:5, 1:5210] 0 0 0 0 0 0 0 0 0 0 ...
 - attr(*, "class")= chr "tidylda"
> 
> # predict on held-out documents using gibbs sampling "fold in"
> p1 <- predict(m, nih_sample_dtm[21:100, ],
+   method = "gibbs",
+   iterations = 200, burnin = 175
+ )
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
> 
> # predict on held-out documents using the dot product method
> p2 <- predict(m, nih_sample_dtm[21:100, ], method = "dot")
> 
> # compare the methods
> barplot(rbind(p1[1, ], p2[1, ]), beside = TRUE, col = c("red", "blue"))
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.388 0.106 2.514 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
